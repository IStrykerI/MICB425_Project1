Taxon_MData_Filtered <- Tax_MDF %>% select(Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
# OTU Data for Mothur
OTU_MDF_Filtered <- OTU_MDF[ ,which((names(OTU_MDF) %in% Taxon_MData_Filtered)==TRUE)]
View(OTU_MDF_Filtered)
Taxon_MData_Filtered <- Tax_MDF %>% select(OTU) %>% filter(str_detect(Genus, 'Planctomyces'))
# Data for Mothur (List of OTU for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_MData_Filtered <- Tax_MDF %>% select(OTU, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
Taxon_MData_Filtered <- Tax_MDF %>% select(OTU) %>% filter(str_detect(Genus, 'Planctomyces'))
# Data for Mothur (List of OTU for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_MData_Filtered <- Tax_MDF %>% select(OTU, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
Taxon_MData_Filtered <- Taxon_MData_Filtered %>% select(OTU)
# Data for Mothur (List of OTU for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_MData_Filtered <- Tax_MDF %>% select(OTU, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
Taxon_MData_Filtered <- Taxon_MData_Filtered %>% select(OTU)
Taxon_QM2Data_Filtered <- Tax_QM2DF %>% select(OTU, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
Taxon_QM2Data_Filtered <- Taxon_QM2Data_Filtered %>% select(OTU)
OTU_List <- split(Taxon_MData_Filtered, seq(nrow(Taxon_MData_Filtered)))
View(OTU_List)
View(OTU_MDF_Filtered)
View(OTU_MDF)
View(OTU_List)
OTU_List[1]
OTU_List[2]
OTU_List <- split(Taxon_MData_Filtered, nrow(Taxon_MData_Filtered)))
OTU_List <- split(Taxon_MData_Filtered, nrow(Taxon_MData_Filtered))
View(OTU_List)
rm(OTU_List)
OTU_MList <- Taxon_MData_Filtered[]
View(OTU_MList)
is_list(OTU_MList)
is_list(Taxon_MData_Filtered)
OTU_QM2List <- Taxon_QM2Data_Filtered %>% select(OTU)
OTU_MList <- Taxon_MData_Filtered %>% select(OTU)
View(OTU_MList)
View(OTU_QM2List)
rm(OTU_QM2List)
load("mothur_phyloseq.RData")
load("qiime2_phyloseq.RData")
# Retrieve tables
Tax_MTable = mothur@tax_table
OTU_Table = mothur@otu_table
Sam_MData = mothur@sam_data
Tax_QM2Table = qiime2@tax_table
ASV_Table = qiime2@otu_table
Sam_QM2Data = qiime2@sam_data
OTU_DF <- data.frame(OTU_Table)
Tax_MDF <- data.frame(Tax_MTable)
setDT(Tax_MDF, keep.rownames=TRUE)
colnames(Tax_MDF)[1] <- "OTU"
# Fitering out uncultured/unclassified Genus in Mothur
Genus_MTax <- Tax_MDF %>% select(OTU, Genus) %>% filter(!str_detect(Genus, 'uncultured'), !str_detect(Genus, 'unclassified'))
# Filtered Results (Less filtered --> More filtered down the list) = Less Filtered (Genus_MCount) and More Filtered (GM_Grp_Fitered)
Genus_MCount <- data.frame(table(Genus_MTax_Filtered)) %>% filter(Freq >= 5, Freq < 50)
Genus_MCount <- data.frame(table(Genus_MTax)) %>% filter(Freq >= 5, Freq < 50)
# Genus Names of Filtered
Genus_MCount$Genus_MTax_Filtered
GM_Grp_Filtered <- Genus_MCount %>% filter(!str_detect(Genus_MTax_Filtered, 'group'), !str_detect(Genus_MTax_Filtered, '_ge'), !str_detect(Genus_MTax_Filtered, 'clade'))
ASV_DF <- data.frame(ASV_Table)
Tax_QM2DF <- data.frame(Tax_QM2Table)
setDT(Tax_QM2DF, keep.rownames=TRUE)
colnames(Tax_QM2DF)[1] <- "OTU"
# Fitering out uncultured/unclassified Genus in Mothur
Genus_QM2Tax <- Tax_QM2DF %>% select(OTU, Genus) %>% filter(!str_detect(Genus, 'uncultured'), !str_detect(Genus, 'unclassified'))
# Filtered Results (Less filtered --> More filtered down the list) = Less Filtered (Genus_QM2Count) and More Filtered (GQM2_Grp_Fitered)
Genus_QM2Count <- data.frame(table(Genus_QM2Tax)) %>% filter(Freq >= 5, Freq < 50)
# Genus Names of Filtered
Genus_QM2Count$Genus_QM2Tax_Filtered
GQM2_Grp_Filtered <- Genus_QM2Count %>% filter(!str_detect(Genus_QM2Tax_Filtered, 'group'), !str_detect(Genus_QM2Tax_Filtered, '_ge'), !str_detect(Genus_QM2Tax_Filtered, 'clade'))
Sam_DF <- data.frame(Sam_MData)
setDT(Sam_DF, keep.rownames=FALSE)
Sam_Data_Filtered <- Sam_DF %>% select(Depth_m, O2_uM)
# Data for Mothur (List of OTU for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_MData_Filtered <- Tax_MDF %>% select(OTU, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
OTU_MList <- Taxon_MData_Filtered %>% select(OTU)
# Data for QIIME2 (List of ASV for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_QM2Data_Filtered <- Tax_QM2DF %>% select(OTU, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
ASV_QM2List <- Taxon_QM2Data_Filtered %>% select(OTU)
rm(ASV_QM2List)
rm(OTU_MList)
Sam_DF <- data.frame(Sam_MData)
setDT(Sam_DF, keep.rownames=FALSE)
Sam_Data_Filtered <- Sam_DF %>% select(Depth_m, O2_uM)
# Data for Mothur (List of OTU for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_MData_Filtered <- Tax_MDF %>% select(OTU, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
OTU_List <- Taxon_MData_Filtered %>% select(OTU)
# Data for QIIME2 (List of ASV for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_QM2Data_Filtered <- Tax_QM2DF %>% select(OTU, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
ASV_List <- Taxon_QM2Data_Filtered %>% select(OTU)
# OTU Data for Mothur
Filtered_OTU <- OTU_DF[,c(OTU_List)]
OTU_List
lapply(OTU_List, class)
print(OTU_List)
print(OTU_List, row.names = FALSE)
stack(print(OTU_List, row.names = FALSE))
aggregate(print(OTU_List, row.names = FALSE))
x <- lapply(OTU_List, c)
View(x)
x
Filtered_ASV <- ASV_DF[,c(x)]
rm(x)
OTU_List
# OTU Data for Mothur
Filtered_OTU <- OTU_DF[,colnames(OTU_List)]
# OTU Data for Mothur
Filtered_OTU <- OTU_DF[,colnames(otu0001)]
# OTU Data for Mothur
Filtered_OTU <- OTU_DF[,colnames(otu00001)]
View(Tax_MDF)
# OTU Data for Mothur
Filtered_OTU <- Tax_MDF[,colnames(Genus)]
# OTU Data for Mothur
Filtered_OTU <- Tax_MDF[,colnames() == "Genus"]
# OTU Data for Mothur
Filtered_OTU <- Tax_MDF[,colnames(Tax_MDF) == "Genus"]
Filtered_OTU
# OTU Data for Mothur
Filtered_OTU <- OTU_DF[,colnames(OTU_DF) == OTU_List]
View(Filtered_OTU)
View(Tax_MDF)
# OTU Data for Mothur
setDT(OTU_DF)
View(OTU_DF)
Filtered_OTU <- OTU_DF[,colnames(OTU_DF) == OTU_List]
View(Filtered_OTU)
OTU_List
Filtered_OTU <- OTU_DF[,colnames(OTU_DF) == lapply(OTU_List, c)]
Filtered_OTU
Filtered_OTU <- Tax_QM2DF %>% select([OTU, Genus])
Filtered_OTU <- Tax_QM2DF %>% select(OTU_List)
View(Sam_DF)
d <- data.frame(Sam_MData)
setDT(d, keep.colnames =FALSE)
rm(d)
View(OTU_List)
View(ASV_DF)
x <- lapply(OTU_List, c)
View(x)
y <- subset(OTU_DF, c("Otu1006"))
y <- subset(OTU_DF, select=c("Otu1006"))
View(y)
y <- subset(OTU_DF, select=c(x))
x <- unlist(OTU_List, use.names=FALSE)
y <- subset(OTU_DF, select=x)
View(y)
setDT(ASV_DF)
ASV_Vectors <- unlist(ASV_List, use.names=FALSE)
ASV_Subsets <- subset(ASV_DF, select=ASV_Vectors)
ASV_Subsets <- ASV_DF[ASV_Vectors]
rm(x,y)
rm(Filtered_OTU)
ASV_Subsets <- subset(ASV_DF, rownames(ASV_DF) %in% ASV_Vectors)
OTU_Vectors <- unlist(OTU_List, use.names=FALSE)
View(ASV_Subsets)
setDT(OTU_DF)
OTU_Vectors <- unlist(OTU_List, use.names=FALSE)
OTU_Subsets <- subset(OTU_DF, select=OTU_Vectors)
View(OTU_Subsets)
ASV_Subsets <- subset(ASV_DF, rownames(ASV_DF) %in% ASV_Vectors)
View(ASV_Subsets)
ASV_Subsets <- rownames_to_column(ASV_DF, x = "hi")
View(ASV_Subsets)
colnames(ASV_DF)[1] <- "ASV"
# OTU Data for QIIME2
setDT(ASV_DF, keep.rownames = TRUE)
colnames(ASV_DF)[1] <- "ASV"
View(ASV_DF)
# Transforming Qiime2 into data frames --------------------------------------------------QIIME2 CODE BELOW--------------------------------------
ASV_DF <- data.frame(ASV_Table)
View(ASV_DF)
setDT(ASV_DF, keep.rownames = TRUE)
colnames(ASV_DF)[1] <- "ASV"
View(ASV_DF)
ASV_Subsets <- ASV_DF %>% filter(Asv == ASV_Vectors)
ASV_Subsets <- ASV_DF %>% filter(ASV == ASV_Vectors)
View(ASV_Subsets)
View(ASV_DF)
View(ASV_Subsets)
View(ASV_List)
ASV_DF <- data.frame(ASV_Table)
setDT(ASV_DF, keep.rownames = TRUE)
colnames(ASV_DF)[1] <- "ASV"
Tax_QM2DF <- data.frame(Tax_QM2Table)
setDT(Tax_QM2DF, keep.rownames=TRUE)
colnames(Tax_QM2DF)[1] <- "ASV"
# Fitering out uncultured/unclassified Genus in QIIME2
Genus_QM2Tax <- Tax_QM2DF %>% select(OTU, Genus) %>% filter(!str_detect(Genus, 'uncultured'), !str_detect(Genus, 'unclassified'))
ASV_DF <- data.frame(ASV_Table)
setDT(ASV_DF, keep.rownames = TRUE)
colnames(ASV_DF)[1] <- "ASV"
Tax_QM2DF <- data.frame(Tax_QM2Table)
setDT(Tax_QM2DF, keep.rownames=TRUE)
colnames(Tax_QM2DF)[1] <- "ASV"
# Fitering out uncultured/unclassified Genus in QIIME2
Genus_QM2Tax <- Tax_QM2DF %>% select(ASV, Genus) %>% filter(!str_detect(Genus, 'uncultured'), !str_detect(Genus, 'unclassified'))
# Filtered Results (Less filtered --> More filtered down the list) = Less Filtered (Genus_QM2Count) and More Filtered (GQM2_Grp_Fitered)
Genus_QM2Count <- data.frame(table(Genus_QM2Tax)) %>% filter(Freq >= 5, Freq < 50)
# Genus Names of Filtered
Genus_QM2Count$Genus_QM2Tax_Filtered
GQM2_Grp_Filtered <- Genus_QM2Count %>% filter(!str_detect(Genus_QM2Tax_Filtered, 'group'), !str_detect(Genus_QM2Tax_Filtered, '_ge'), !str_detect(Genus_QM2Tax_Filtered,
# Genus Names of Filtered
Genus_MCount$Genus_MTax
# Transforming Mothur into data frames --------------------------------------------------MOTHUR CODE BELOW--------------------------------------
OTU_DF <- data.frame(OTU_Table)
OTU_DF <- data.frame(OTU_Table)
setDT(OTU_DF)
Tax_MDF <- data.frame(Tax_MTable)
setDT(Tax_MDF, keep.rownames=TRUE)
colnames(Tax_MDF)[1] <- "OTU"
# Fitering out uncultured/unclassified Genus in Mothur
Genus_MTax <- Tax_MDF %>% select(OTU, Genus) %>% filter(!str_detect(Genus, 'uncultured'), !str_detect(Genus, 'unclassified'))
# Filtered Results (Less filtered --> More filtered down the list) = Less Filtered (Genus_MCount) and More Filtered (GM_Grp_Fitered)
Genus_MCount <- data.frame(table(Genus_MTax)) %>% filter(Freq >= 5, Freq < 50)
GM_Grp_Filtered <- Genus_MCount %>% filter(!str_detect(Genus_MTax_Filtered, 'group'), !str_detect(Genus_MTax_Filtered, '_ge'), !str_detect(Genus_MTax_Filtered, 'clade'))
ASV_DF <- data.frame(ASV_Table)
setDT(ASV_DF, keep.rownames = TRUE)
colnames(ASV_DF)[1] <- "ASV"
Tax_QM2DF <- data.frame(Tax_QM2Table)
setDT(Tax_QM2DF, keep.rownames=TRUE)
colnames(Tax_QM2DF)[1] <- "ASV"
# Fitering out uncultured/unclassified Genus in QIIME2
Genus_QM2Tax <- Tax_QM2DF %>% select(ASV, Genus) %>% filter(!str_detect(Genus, 'uncultured'), !str_detect(Genus, 'unclassified'))
# Filtered Results (Less filtered --> More filtered down the list) = Less Filtered (Genus_QM2Count) and More Filtered (GQM2_Grp_Fitered)
Genus_QM2Count <- data.frame(table(Genus_QM2Tax)) %>% filter(Freq >= 5, Freq < 50)
GQM2_Grp_Filtered <- Genus_QM2Count %>% filter(!str_detect(Genus_QM2Tax_Filtered, 'group'), !str_detect(Genus_QM2Tax_Filtered, '_ge'), !str_detect(Genus_QM2Tax_Filtered, 'clade'))
View(Genus_QM2Tax)
Sam_DF <- data.frame(Sam_MData)
setDT(Sam_DF, keep.rownames=FALSE)
Sam_Data_Filtered <- Sam_DF %>% select(Depth_m, O2_uM)
# Data for Mothur (List of OTU for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_MData_Filtered <- Tax_MDF %>% select(OTU, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
OTU_List <- Taxon_MData_Filtered %>% select(OTU)
# Data for QIIME2 (List of ASV for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_QM2Data_Filtered <- Tax_QM2DF %>% select(OTU, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
Taxon_QM2Data_Filtered <- Tax_QM2DF %>% select(ASV, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
ASV_List <- Taxon_QM2Data_Filtered %>% select(ASV)
OTU_Vectors <- unlist(OTU_List, use.names=FALSE)
OTU_Subsets <- subset(OTU_DF, select=OTU_Vectors)
# OTU Data for QIIME2
ASV_Vectors <- unlist(ASV_List, use.names=FALSE)
ASV_Subsets <- ASV_DF %>% filter(ASV == ASV_Vectors)
View(ASV_Subsets)
View(ASV_List)
View(ASV_Subsets)
View(ASV_List)
View(ASV_Subsets)
ASV_Subsets <- ASV_DF %>% filter(ASV %in% ASV_Vectors)
View(ASV_Subsets)
View(ASV_List)
View(ASV_Subsets)
View(OTU_List)
View(ASV_Subsets)
Sam_DF <- data.frame(Sam_MData)
setDT(Sam_DF, keep.rownames=FALSE)
Sam_Data_Filtered <- Sam_DF %>% select(Depth_m, O2_uM)
# Data for Mothur (List of OTU for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_MData_Filtered <- Tax_MDF %>% select(OTU, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
OTU_List <- Taxon_MData_Filtered %>% select(OTU)
# Data for QIIME2 (List of ASV for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_QM2Data_Filtered <- Tax_QM2DF %>% select(ASV, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
ASV_List <- Taxon_QM2Data_Filtered %>% select(ASV)
# OTU Data for Mothur
OTU_Vectors <- unlist(OTU_List, use.names=FALSE)
OTU_Subsets <- subset(OTU_DF, select=OTU_Vectors)
# OTU Data for QIIME2
ASV_Vectors <- unlist(ASV_List, use.names=FALSE)
ASV_Subsets <- ASV_DF %>% filter(ASV %in% ASV_Vectors)
# Filtered Results (Less filtered --> More filtered down the list) = Less Filtered (Genus_MCount) and More Filtered (GM_Grp_Fitered)
Genus_MCount <- data.frame(table(Genus_MTax %>% select(Genus))) %>% filter(Freq >= 5, Freq < 50)
library(tidyverse)
source("https://bioconductor.org/biocLite.R")
biocLite("phyloseq")
library(phyloseq)
library(data.table)
# Load phyloseq data
load("data/mothur_phyloseq.RData")
setwd("C:/Users/Administrator/Desktop/MICB425/MICB425_Project1")
load("data/mothur_phyloseq.RData")
library(tidyverse)
source("https://bioconductor.org/biocLite.R")
biocLite("phyloseq")
library(phyloseq)
library(data.table)
# Load phyloseq data
load("data/mothur_phyloseq.RData")
load("data/qiime2_phyloseq.RData")
# Retrieve tables
Tax_MTable = mothur@tax_table
OTU_Table = mothur@otu_table
Sam_MData = mothur@sam_data
Tax_QM2Table = qiime2@tax_table
ASV_Table = qiime2@otu_table
Sam_QM2Data = qiime2@sam_data
OTU_DF <- data.frame(OTU_Table)
setDT(OTU_DF)
Tax_MDF <- data.frame(Tax_MTable)
setDT(Tax_MDF, keep.rownames=TRUE)
colnames(Tax_MDF)[1] <- "OTU"
# Fitering out uncultured/unclassified Genus in Mothur
Genus_MTax <- Tax_MDF %>% select(OTU, Genus) %>% filter(!str_detect(Genus, 'uncultured'), !str_detect(Genus, 'unclassified'))
# Filtered Results (Less filtered --> More filtered down the list) = Less Filtered (Genus_MCount) and More Filtered (GM_Grp_Fitered)
Genus_MCount <- data.frame(table(Genus_MTax %>% select(Genus))) %>% filter(Freq >= 5, Freq < 50)
GM_Grp_Filtered <- Genus_MCount %>% filter(!str_detect(Var1, 'group'), !str_detect(Var1, '_ge'), !str_detect(Var1, 'clade'))
ASV_DF <- data.frame(ASV_Table)
setDT(ASV_DF, keep.rownames = TRUE)
colnames(ASV_DF)[1] <- "ASV"
Tax_QM2DF <- data.frame(Tax_QM2Table)
setDT(Tax_QM2DF, keep.rownames=TRUE)
colnames(Tax_QM2DF)[1] <- "ASV"
# Fitering out uncultured/unclassified Genus in QIIME2
Genus_QM2Tax <- Tax_QM2DF %>% select(ASV, Genus) %>% filter(!str_detect(Genus, 'uncultured'), !str_detect(Genus, 'unclassified'))
# Filtered Results (Less filtered --> More filtered down the list) = Less Filtered (Genus_QM2Count) and More Filtered (GQM2_Grp_Fitered)
# Not working right now, Missing Freq Column
Genus_QM2Count <- data.frame(table(Genus_QM2Tax %>% select(Genus))) %>% filter(Freq >= 5, Freq < 50)
GQM2_Grp_Filtered <- Genus_QM2Count %>% filter(!str_detect(Var1, 'group'), !str_detect(Var1, '_ge'), !str_detect(Var1, 'clade'))
am_DF <- data.frame(Sam_MData)
setDT(Sam_DF, keep.rownames=FALSE)
# Data shared by both (Depth/O2 Extracted)
Sam_DF <- data.frame(Sam_MData)
setDT(Sam_DF, keep.rownames=FALSE)
Sam_Data_Filtered <- Sam_DF %>% select(Depth_m, O2_uM)
# Data for Mothur (List of OTU for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_MData_Filtered <- Tax_MDF %>% select(OTU, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
OTU_List <- Taxon_MData_Filtered %>% select(OTU)
# Data for QIIME2 (List of ASV for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_QM2Data_Filtered <- Tax_QM2DF %>% select(ASV, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
ASV_List <- Taxon_QM2Data_Filtered %>% select(ASV)
# OTU Data for Mothur
OTU_Vectors <- unlist(OTU_List, use.names=FALSE)
OTU_Subsets <- subset(OTU_DF, select=OTU_Vectors)
# OTU Data for QIIME2
ASV_Vectors <- unlist(ASV_List, use.names=FALSE)
ASV_Subsets <- ASV_DF %>% filter(ASV %in% ASV_Vectors)
install.packages("formatR")
rarefiedPer = transform_sample_counts(rarefied, function(x) 100 * x/sum(x))
rarefied = rarefy_even_depth(qiime2, sample.size=100000)
rarefied = rarefy_even_depth(qiime2, sample.size=100000)
rarefiedPer = transform_sample_counts(rarefied, function(x) 100 * x/sum(x))
firstTaxa = filter_taxa(rarefiedPer, function(x) sum(x == 0) <= 4, TRUE)
# Second rule
basedOnGenus <- as.data.frame(tax_table(firstTaxa)) %>%
filter(!str_detect(Genus, 'uncultured'), !str_detect(Genus, 'unclassified'))
secondTaxa = subset_taxa(firstTaxa, Genus %in% basedOnGenus$Genus)
# Third rule
basedOnphylums <- as.data.frame(tax_table(secondTaxa)) %>%
group_by(Phylum) %>%
count() %>%
filter( n > 5)
## In contrary we can run the following:
# thirdTaxa <- prune_taxa(taxa_sums(secondTaxa) > 5, secondTaxa)
thirdTaxa <- subset_taxa(secondTaxa, Phylum %in% basedOnphylums$Phylum)
rarefiedRich <- estimate_richness(rarefied, measures = "Shannon")
rarefiedRichAlpha <- full_join(rownames_to_column(rarefiedRich),
rownames_to_column(data.frame(sample_data(rarefiedPer))),
by = "rowname")
p1 <- rarefiedRichAlpha %>% ggplot() +
geom_point(aes(x=Depth_m, y=Shannon), size=4, alpha=0.7) +
geom_smooth(method='loess', aes(x=as.numeric(Depth_m), y=Shannon)) +
labs(title="Alpha-diversity across depth",
y="Shannon's diversity index", x="Depth (m)")
p2 <- rarefiedRichAlpha %>% ggplot() +
geom_point(aes(x=O2_uM, y=Shannon), size=4, alpha=0.7) +
labs(title="Alpha-diversity across oxygen",
y="Shannon's diversity index", x="Oxygen (uM)")
p3 <- rarefiedRichAlpha %>%
mutate(O2_group = ifelse(O2_uM == 0, "anoxic", "oxic")) %>%
ggplot() + geom_boxplot(aes(x=O2_group, y=Shannon)) +
labs(title="Alpha-diversity across oxygen",
y="Shannon's diversity index", x="Oxygen (uM)")
p4 <- rarefiedRichAlpha %>% ggplot() +
geom_point(aes(x=Depth_m, y=O2_uM), size=4, alpha=0.7) +
geom_smooth(method='loess', aes(x=as.numeric(Depth_m), y=O2_uM)) +
labs(title="Oxygen concentration across depth",
y="Oxygen  (uM)", x="Depth (m)")
grid.arrange(p1, p2, p3, p4, ncol=2)
rarefiedRich <- estimate_richness(rarefied, measures = "Shannon")
rarefiedRichAlpha <- full_join(rownames_to_column(rarefiedRich),
rownames_to_column(data.frame(sample_data(rarefiedPer))),
by = "rowname")
p1 <- rarefiedRichAlpha %>% ggplot() +
geom_point(aes(x=Depth_m, y=Shannon), size=4, alpha=0.7) +
geom_smooth(method='loess', aes(x=as.numeric(Depth_m), y=Shannon)) +
labs(title="Alpha-diversity across depth",
y="Shannon's diversity index", x="Depth (m)")
p2 <- rarefiedRichAlpha %>% ggplot() +
geom_point(aes(x=O2_uM, y=Shannon), size=4, alpha=0.7) +
labs(title="Alpha-diversity across oxygen",
y="Shannon's diversity index", x="Oxygen (uM)")
p3 <- rarefiedRichAlpha %>%
mutate(O2_group = ifelse(O2_uM == 0, "anoxic", "oxic")) %>%
ggplot() + geom_boxplot(aes(x=O2_group, y=Shannon)) +
labs(title="Alpha-diversity across oxygen",
y="Shannon's diversity index", x="Oxygen (uM)")
p4 <- rarefiedRichAlpha %>% ggplot() +
geom_point(aes(x=Depth_m, y=O2_uM), size=4, alpha=0.7) +
geom_smooth(method='loess', aes(x=as.numeric(Depth_m), y=O2_uM)) +
labs(title="Oxygen concentration across depth",
y="Oxygen  (uM)", x="Depth (m)")
grid.arrange(p1, p2, p3, p4, ncol=2)
install.packages("gridExtra")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
grid.arrange(p1, p2, p3, p4, ncol=2)
source("https://bioconductor.org/biocLite.R")
library("tidyverse")
library("phyloseq")
library("gridExtra")
library("magrittr")
library("formatR")
grid.arrange(p1, p2, p3, p4, ncol=2)
get_taxa_unique(physeq = thirdTaxa, taxonomic.rank = "Phylum")
subTaxa = subset_taxa(thirdTaxa, Phylum == "Planctomycetes")
plot_bar(subTaxa, fill="Genus") +
geom_bar(aes(color = Genus, fill = Genus), stat = 'identity',
position = 'stack') +
labs(title="Genus distribution of Planctomycetes across samples")
```
We further investigated the genus distribution of this phylum across samples grouped by family level.
```{r}
plot_bar(subTaxa, fill="Genus", facet_grid=~Family) +
geom_bar(aes(color = Genus, fill = Genus), stat = 'identity',
position = 'stack') +
labs(title="Genus distribution of Planctomycetes across samples grouped by family level")
```
Finally, we settled on performing experimental analysis at \emph{Planctomyces} genus level and it's associated OTUs.
```{r}
workingTaxa = subset_taxa(thirdTaxa, Genus == "Planctomyces")
(suggestedOTUs <- colnames(otu_table(workingTaxa)))
subTaxa = subset_taxa(thirdTaxa, Phylum == "Planctomycetes")
plot_bar(subTaxa, fill="Genus") +
geom_bar(aes(color = Genus, fill = Genus), stat = 'identity',
position = 'stack') +
labs(title="Genus distribution of Planctomycetes across samples")
subTaxa = subset_taxa(thirdTaxa, Phylum == "Planctomycetes")
plot_bar(subTaxa, fill="Genus") +
geom_bar(aes(color = Genus, fill = Genus), stat = 'identity',
position = 'stack') +
labs(title="Genus distribution of Planctomycetes across samples")
subTaxa = subset_taxa(thirdTaxa, Phylum == "Planctomycetes")
View(thirdTaxa)
View(secondTaxa)
View(thirdTaxa)
thirdTaxa@otu_table
thirdTaxa@tax_table
subTaxa = subset_taxa(thirdTaxa, Phylum == "Planctomycetes")
subTaxa = subset_taxa(thirdTaxa@tax_table, Phylum == "Planctomycetes")
subTaxa = subset_taxa(thirdTaxa@tax_table, Phylum == "Planctomycetes")
View(secondTaxa)
View(thirdTaxa)
View(secondTaxa)
View(thirdTaxa)
View(secondTaxa)
View(thirdTaxa)
View(qiime2)
View(mothur)
set.seed(4832)
rarefied = rarefy_even_depth(qiime2, sample.size=100000)
```
Rarefied counts were converted to relative abundance percentages.
```{r}
rarefiedPer = transform_sample_counts(rarefied, function(x) 100 * x/sum(x))
```{r, include=FALSE}
source("https://bioconductor.org/biocLite.R")
library("tidyverse")
library("phyloseq")
library("gridExtra")
library("magrittr")
library("formatR")
theme_set(theme_bw())
pal = "Set1"
scale_colour_discrete <-  function(palname=pal, ...){
scale_colour_brewer(palette=palname, ...)
}
scale_fill_discrete <-  function(palname=pal, ...){
scale_fill_brewer(palette=palname, ...)
}
```
## Data Preporocessing
We use saanich inlet datasets that are propocssed using mothur and QIIME2
```{r}
load("data/mothur_phyloseq.RData")
load("data/qiime2_phyloseq.RData")
```
Samples are then rarefied/normalized to $100,000$ sequences per sample to facilitate comparisons between samples. A random seed was set to ensure reproducibility.
```{r}
set.seed(4832)
rarefied = rarefy_even_depth(qiime2, sample.size=100000)
```
Rarefied counts were converted to relative abundance percentages.
```{r}
rarefiedPer = transform_sample_counts(rarefied, function(x) 100 * x/sum(x))
```
Next, we perform a series of filterings according to three rules: i)- exclude OTUs that are not observed for more than $4$ samples; ii)- prune samples and OTUs with unknown values, such as ``unclassified`` value; and iii)- any phylum fail to have more than $5$ OTUs should be trimmed. The codes used for applying the three rules are:
```{r}
# First rule
firstTaxa = filter_taxa(rarefiedPer, function(x) sum(x == 0) <= 4, TRUE)
# Second rule
basedOnGenus <- as.data.frame(tax_table(firstTaxa)) %>%
filter(!str_detect(Genus, 'uncultured'), !str_detect(Genus, 'unclassified'))
secondTaxa = subset_taxa(firstTaxa, Genus %in% basedOnGenus$Genus)
# Third rule
basedOnphylums <- as.data.frame(tax_table(secondTaxa)) %>%
group_by(Phylum) %>%
count() %>%
filter( n > 5)
## In contrary we can run the following:
# thirdTaxa <- prune_taxa(taxa_sums(secondTaxa) > 5, secondTaxa)
thirdTaxa <- subset_taxa(secondTaxa, Phylum %in% basedOnphylums$Phylum)
install.packages("magrittr")
install.packages("magrittr")
