table_Project2 = read.table(file="GT10Complete_LT5Contam_MAGs_checkM.tsv", header=TRUE, sep="\t")
table_Project2 = read.table(file="GT10Complete_LT5Contam_MAGs_checkM.tsv", header=FALSE, sep="\t")
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
install.packages(dplyr)
library(ggplot2)
library(dplyr)
library(reshape2)
get_class <- function(string) {
# Kingdom;Phylum;Class;Order;Family;Genus;Species
char_var <- as.character(string)
class <- unlist(strsplit(x = char_var, split = ';', fixed = TRUE))[3]
class <- gsub(x = class, pattern = "\\[", replacement = "")
class <- gsub(x = class, pattern = "\\]", replacement = "")
if (is.na(class)) {
return("Unclassified Bacteria")
}
if ( nchar(class) == 0 ) {
return("Unclassified Bacteria")
}
if (class == "Bacteria") {
return("Unclassified Bacteria")
}
else {
return(class)
}
}
checkm_dat <- read.table("GT10Complete_LT5Contam_MAGs_checkM.tsv",
header = F, sep="\t")
Count <- read.file("Saanich.trim.contigs.good.unique.good.filter.unique.precluster.count_table", row.names=1, sep="\s")
Count <- read.file("Saanich.trim.contigs.good.unique.good.filter.unique.precluster.count_table", row.names=1, sep="\t")
#Packages
##Install a package. Only needs to be done once.
install.packages("vegan")
##Load your necessary packages everytime you open RStudio
library(vegan)
Count <- read.file("Saanich.trim.contigs.good.unique.good.filter.unique.precluster.count_table", row.names=1, sep="\t")
Count <- read.table("Saanich.trim.contigs.good.unique.good.filter.unique.precluster.count_table", row.names=1, sep="\t")
Count <- read.table("Saanich.trim.contigs.good.unique.good.filter.unique.precluster.pick.count_table", row.names=1, sep="\t")
Count <- read.ftable("Saanich.trim.contigs.good.unique.good.filter.unique.precluster.pick.count_table", row.names=1, sep="\t")
Count <- read.ftable("Saanich.trim.contigs.good.unique.good.filter.unique.precluster.pick.count_table", sep="\t")
Count <- read.file("Saanich.trim.contigs.good.unique.good.filter.unique.precluster.pick.count_table", sep="\t")
x <- import("Saanich.trim.contigs.good.unique.good.filter.unique.precluster.pick.count_table")
library("rio")
library(rio)
install.packages("rio")
library(rio)
x <- import("Saanich.trim.contigs.good.unique.good.filter.unique.precluster.pick.count_table")
install_formats()
x <- import("Saanich.trim.contigs.good.unique.good.filter.unique.precluster.pick.count_table")
#To manipulate and plot data
library(tidyverse)
library(kableExtra)
#To make tables
library(kableExtra)
library(knitr)
install.packages("KableExtra")
Sample_Collection = data.frame(
name = c("Skittles", "Gummy Bears", "M&M", "Gumdrops", "Mutated Candy", "Kisses", "Sour Bears", "Spiders", "Gummy Rods", "Long Gummy Rods"),
characteristics = c("Green", "Pink", "Orange", "Red", "Yellow", "Brown", "Blue", "Other", "Wrapper", "Multi-Colour"),
occurences = c(2, 4, 1)
)
Sample_Collection = data.frame(
name = c("Skittles", "Gummy Bears", "M&M", "Gumdrops", "Mutated Candy", "Kisses", "Sour Bears", "Spiders", "Gummy Rods", "Long Gummy Rods"))
View(Sample_Collection)
Sample_Collection = data.frame(
Num = c(1:29),
Name = c("Skittles", "Gummy Bears", "M&M", "Gumdrops", "Mutated Candy", "Kisses", "Sour Bears", "Spiders", "Gummy Rods", "Long Gummy Rods"),
Characteristics = c("Black"))
Sample_Collection = data.frame(
Num = c(1:29),
Name = c("Skittles", "Skittles", "Skittles", "Skittles", "Skittles", "Gummy Bears", "Gummy Bears", "Gummy Bears", "Gummy Bears", "Gummy Bears", "M&M", "M&M", "M&M", "M&M", "M&M", "M&M", "Gumdrops", "Gumdrops", "Gumdrops", "Mutated Candy", "Kisses", "Sour Bears", "Spiders", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Long Gummy Rods"),
Characteristics = c(1:29))
View(Sample_Collection)
Sample_Collection = data.frame(
Num = c(1:29),
Name = c("Skittles", "Skittles", "Skittles", "Skittles", "Skittles", "Gummy Bears", "Gummy Bears", "Gummy Bears", "Gummy Bears", "Gummy Bears", "M&M", "M&M", "M&M", "M&M", "M&M", "M&M", "Gumdrops", "Gumdrops", "Gumdrops", "Mutated Candy", "Kisses", "Sour Bears", "Spiders", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Long Gummy Rods"),
characteristics = c("Red", "Green", "Brown", "Yellow", "Orange", "Green", "Pink", "Orange", "Red", "Yellow", "Red", "Orange", "Brown", "Green", "Yellow", "Blue", "Orange", "Blue", "Yellow", "Red", "Wrapper", "Yellow", "Multi-Colour", "Orange", "Pink", "Green", "Yellow", "Red"))
Sample_Collection = data.frame(
Num = c(1:29),
Name = c("Skittles", "Skittles", "Skittles", "Skittles", "Skittles", "Gummy Bears", "Gummy Bears", "Gummy Bears", "Gummy Bears", "Gummy Bears", "M&M", "M&M", "M&M", "M&M", "M&M", "M&M", "Gumdrops", "Gumdrops", "Gumdrops", "Mutated Candy", "Kisses", "Sour Bears", "Spiders", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Long Gummy Rods"),
characteristics = c("Red", "Green", "Brown", "Yellow", "Orange", "Green", "Pink", "Orange", "Red", "Yellow", "Red", "Orange", "Brown", "Green", "Yellow", "Blue", "Orange", "Blue", "Yellow", "Red", "Wrapper", "Yellow", "Multi-Colour", "Orange", "Pink", "Green", "Yellow", "Red", "Pink"))
rm(Sample_Collection)
X = c(1) + c(2)
rm(X)
Sk = c("Skittle")
Name = Sk + Sk + Sk + Sk + Sk
Name = c("SK") + c("Sk")
rm(Sk)
Sample_Collection = data.frame(
Num = c(1:29),
Name = c("Skittles", "Skittles", "Skittles", "Skittles", "Skittles", "Gummy Bears", "Gummy Bears", "Gummy Bears", "Gummy Bears", "Gummy Bears", "M&M", "M&M", "M&M", "M&M", "M&M", "M&M", "Gumdrops", "Gumdrops", "Gumdrops", "Mutated Candy", "Kisses", "Sour Bears", "Spiders", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Long Gummy Rods"),
characteristics = c("Red", "Green", "Brown", "Yellow", "Orange", "Green", "Pink", "Orange", "Red", "Yellow", "Red", "Orange", "Brown", "Green", "Yellow", "Blue", "Orange", "Blue", "Yellow", "Red", "Wrapper", "Yellow", "Multi-Colour", "Orange", "Pink", "Green", "Yellow", "Red", "Pink"),
Occurences = c(9,7,10,6,6,3,1,3,2,1,3,16,8,5,8,13,1,1,2,1,4,1,1,4,8,7,4,6,1))
View(Sample_Collection)
order(Occurencs, Sample_Collection)
Ordered = order(Occurences, Sample_Collection)
Ordered = order(Sample_Collection, Occurences)
rm(Sample_Collection)
SC = data.frame(
Num = c(1:29),
Name = c("Skittles", "Skittles", "Skittles", "Skittles", "Skittles", "Gummy Bears", "Gummy Bears", "Gummy Bears", "Gummy Bears", "Gummy Bears", "M&M", "M&M", "M&M", "M&M", "M&M", "M&M", "Gumdrops", "Gumdrops", "Gumdrops", "Mutated Candy", "Kisses", "Sour Bears", "Spiders", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Long Gummy Rods"),
characteristics = c("Red", "Green", "Brown", "Yellow", "Orange", "Green", "Pink", "Orange", "Red", "Yellow", "Red", "Orange", "Brown", "Green", "Yellow", "Blue", "Orange", "Blue", "Yellow", "Red", "Wrapper", "Yellow", "Multi-Colour", "Orange", "Pink", "Green", "Yellow", "Red", "Pink"),
Occurences = c(9,7,10,6,6,3,1,3,2,1,3,16,8,5,8,13,1,1,2,1,4,1,1,4,8,7,4,6,1))
SC[order(SC$Occurences)]
SC[,order(SC$Occurences)]
SC[order(SC$Occurences),]
SC = data.frame(
Num = c(1:29),
Name = c("Skittles", "Skittles", "Skittles", "Skittles", "Skittles", "Gummy Bears", "Gummy Bears", "Gummy Bears", "Gummy Bears", "Gummy Bears", "M&M", "M&M", "M&M", "M&M", "M&M", "M&M", "Gumdrops", "Gumdrops", "Gumdrops", "Mutated Candy", "Kisses", "Sour Bears", "Spiders", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Long Gummy Rods"),
characteristics = c("Red", "Green", "Brown", "Yellow", "Orange", "Green", "Pink", "Orange", "Red", "Yellow", "Red", "Orange", "Brown", "Green", "Yellow", "Blue", "Orange", "Blue", "Yellow", "Red", "Wrapper", "Yellow", "Multi-Colour", "Orange", "Pink", "Green", "Yellow", "Red", "Pink"),
Occurences = c(9,7,10,6,6,3,1,3,2,1,3,16,8,5,8,13,1,1,2,1,4,1,1,4,8,7,4,6,1))
SC[order(SC$Occurences),]
View(SC)
Ordered_SC = SC[order(SC$Occurences),]
View(Ordered_SC)
rm(Ordered_SC)
rm(SC)
Sample_Collection = data.frame(
Num = c(1:29),
Name = c("Skittles", "Skittles", "Skittles", "Skittles", "Skittles", "Gummy Bears", "Gummy Bears", "Gummy Bears", "Gummy Bears", "Gummy Bears", "M&M", "M&M", "M&M", "M&M", "M&M", "M&M", "Gumdrops", "Gumdrops", "Gumdrops", "Mutated Candy", "Kisses", "Sour Bears", "Spiders", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Gummy Rods", "Long Gummy Rods"),
characteristics = c("Red", "Green", "Brown", "Yellow", "Orange", "Green", "Pink", "Orange", "Red", "Yellow", "Red", "Orange", "Brown", "Green", "Yellow", "Blue", "Orange", "Blue", "Yellow", "Red", "Wrapper", "Yellow", "Multi-Colour", "Orange", "Pink", "Green", "Yellow", "Red", "Pink"),
Occurences = c(9,7,10,6,6,3,1,3,2,1,3,16,8,5,8,13,1,1,2,1,4,1,1,4,8,7,4,6,1))
random(1:29)
rand(1:29)
library(math)
View(Sample_Collection)
Sample_Curve = data.frame(
x = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29),
y = c(1,2,3,3,4,5,6,6,6,7,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,10)
)
View(Sample_Curve)
ggplot(Sample_Curve, aes(x=x, y=y)) +
geom_point() +
geom_smooth() +
labs(x="Cumulative number of individuals classified", y="Cumulative number of species observed")
colSums(Sample_Collection$Occurences)
colSums(Sample_Collection)
colSums(3)
dim(Sample_Collection)
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
View(x)
x <- cbind(x1 = c(9,7,10,6,6,3,1,3,2,1,3,16,8,5,8,13,1,1,2,1,4,1,1,4,8,7,4,6,1))
View(x)
colSums(x)
S1 = 4/142
S2 = 10/142
S3 = 29/142
S4 = 4/142
S5 = 53/142
S6 = 1/142
S7 = 1/142
S8 = 38/142
S9 = 1/142
S10 = 1/142
1/(S1^2 + S2^2 + S3^2 + S4^2 + S5^2 + S6^2 + S7^2 + S8^2 + S9^2 + S10^2)
# RICHNESS: CHAO1 RICHNESS ESTIMATOR
SCHAO1= 10 + ((4^2)/(2*6))
SRI = 1/(S1^2 + S2^2 + S3^2 + S4^2 + S5^2 + S6^2 + S7^2 + S8^2 + S9^2 + S10^2)
Diversity_Data =
Sample_Collection %>%
select(Name, Occurences) %>%
spread(Name, Occurences)
Diversity_Data =
Sample_Collection %>%
select(Name, Occurences)
View(Diversity_Data)
View(Diversity_Data)
Diversity_Data = data.frame(c("Skittles", "Gummy Bears", "M&M", "Gumdrops", "Mutated Candy", "Kisses", "Sour Bears", "Spiders", "Gummy Rods", "Long Gummy Rods"), c(38,10,53,4,1,4,1,1,29,1))
View(Diversity_Data)
Diversity_Data
diversity(Diversity_Data, index="invsimpson")
#R Calculations
library(vegan)
diversity(Diversity_Data, index="invsimpson")
View(Diversity_Data)
View(Diversity_Data)
Diversity_Data = data.frame(
Name = c("Skittles", "Gummy Bears", "M&M", "Gumdrops", "Mutated Candy", "Kisses", "Sour Bears", "Spiders", "Gummy Rods", "Long Gummy Rods"),
Occurences = c(38,10,53,4,1,4,1,1,29,1))
View(Diversity_Data)
diversity(Diversity_Data, index="invsimpson")
Diversity_Data
example_data1_diversity =
Diversity_Data %>%
select(name, occurences) %>%
spread(name, occurences)
example_data1_diversity =
Diversity_Data %>%
select(Name, Occurences) %>%
spread(Name, Occurences)
View(example_data1_diversity)
rm(example_data1_diversity)
Fixed_Diversity_Data = data.frame(
Name = c("Skittles", "Gummy Bears", "M&M", "Gumdrops", "Mutated Candy", "Kisses", "Sour Bears", "Spiders", "Gummy Rods", "Long Gummy Rods"),
Occurences = c(38,10,53,4,1,4,1,1,29,1))
Diversity_Data =
Fixed_Diversity_Data %>%
select(Name, Occurences) %>%
spread(Name, Occurences)
Diversity_Data
View(Diversity_Data)
diversity(Diversity_Data, index="invsimpson")
specpool(Diversity_Data)
View(x)
rm(x)
Real_SRI = diversity(Diversity_Data, index="invsimpson")
Real_SCHAO1 = specpool(Diversity_Data)
View(Real_SCHAO1)
View(Sample_Curve)
ggplot(Sample_Curve, aes(x=x, y=y)) +
geom_point() +
geom_smooth() +
labs(x="Cumulative number of individuals classified", y="Cumulative number of species observed")
library(kableExtra)
library(knitr)
#To manipulate and plot data
library(tidyverse)
#R Calculations
library(vegan)
ggplot(Sample_Curve, aes(x=x, y=y)) +
geom_point() +
geom_smooth() +
labs(x="Cumulative number of individuals classified", y="Cumulative number of species observed")
View(Sample_Collection)
load("mothur_phyloseq.RData")
load("qiime2_phyloseq.RData")
setwd("C:/Users/Administrator/Desktop/MICB425/MICB425_Project1")
# Set-up
library(tidyverse)
library(tidyverse)
# Set-up
library(tidyverse)
setwd("C:/Users/Administrator/Desktop/MICB425/MICB425_Project1")
# Set-up
library(tidyverse)
install.packages("tidyverse")
source("https://bioconductor.org/biocLite.R")
biocLite("phyloseq")
y
y
yy
# Set-up
library(tidyverse)
source("https://bioconductor.org/biocLite.R")
biocLite("phyloseq")
library(phyloseq)
library(data.table)
# Load phyloseq data
load("mothur_phyloseq.RData")
load("qiime2_phyloseq.RData")
# Retrieve tables
Tax_MTable = mothur@tax_table
OTU_MTable = mothur@otu_table
Sam_MData = mothur@sam_data
Tax_QM2Table = qiime2@tax_table
OTU_QM2Table = qiime2@otu_table
Sam_QM2Data = qiime2@sam_data
# Legend:
# M = Mothur
# QM2 = QIIME2
# DF = Data Frame
# Tax/OTU/Sam = Taxon, OTU, Sample Data
# Transforming Mothur into data frames --------------------------------------------------MOTHUR CODE BELOW--------------------------------------
OTU_MDF <- data.frame(OTU_MTable)
Tax_MDF <- data.frame(Tax_MTable)
setDT(Tax_MDF, keep.rownames=TRUE)
colnames(Tax_MDF)[1] <- "OTU"
# Fitering out uncultured/unclassified Genus in Mothur
Genus_MTax <- Tax_MDF %>% select(OTU, Genus) %>% filter(!str_detect(Genus, 'uncultured'), !str_detect(Genus, 'unclassified'))
# Filtered Results (Less filtered --> More filtered down the list) = Less Filtered (Genus_MCount) and More Filtered (GM_Grp_Fitered)
Genus_MCount <- data.frame(table(Genus_MTax_Filtered)) %>% filter(Freq >= 5, Freq < 50)
# Genus Names of Filtered
Genus_MCount$Genus_MTax_Filtered
GM_Grp_Filtered <- Genus_MCount %>% filter(!str_detect(Genus_MTax_Filtered, 'group'), !str_detect(Genus_MTax_Filtered, '_ge'), !str_detect(Genus_MTax_Filtered, 'clade'))
# Transforming Qiime2 into data frames --------------------------------------------------QIIME2 CODE BELOW--------------------------------------
OTU_QM2DF <- data.frame(OTU_QM2Table)
Tax_QM2DF <- data.frame(Tax_QM2Table)
setDT(Tax_QM2DF, keep.rownames=TRUE)
colnames(Tax_QM2DF)[1] <- "OTU"
# Fitering out uncultured/unclassified Genus in Mothur
Genus_QM2Tax <- Tax_QM2DF %>% select(OTU, Genus) %>% filter(!str_detect(Genus, 'uncultured'), !str_detect(Genus, 'unclassified'))
# Filtered Results (Less filtered --> More filtered down the list) = Less Filtered (Genus_QM2Count) and More Filtered (GQM2_Grp_Fitered)
Genus_QM2Count <- data.frame(table(Genus_QM2Tax_Filtered)) %>% filter(Freq >= 5, Freq < 50)
# Genus Names of Filtered
Genus_QM2Count$Genus_QM2Tax_Filtered
GQM2_Grp_Filtered <- Genus_QM2Count %>% filter(!str_detect(Genus_QM2Tax_Filtered, 'group'), !str_detect(Genus_QM2Tax_Filtered, '_ge'), !str_detect(Genus_QM2Tax_Filtered, 'clade'))
# WORK . . .
# Data shared by both (Depth/O2 Extracted)
Sam_DF <- data.frame(Sam_MData)
setDT(Sam_DF, keep.rownames=FALSE)
Sam_Data_Filtered <- Sam_DF %>% select(Depth_m, O2_uM)
# Data for Mothur (List of OTU for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_MData_Filtered <- Tax_MDF %>% select(OTU, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
OTU_MList <- Taxon_MData_Filtered %>% select(OTU)
# Data for QIIME2 (List of ASV for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_QM2Data_Filtered <- Tax_QM2DF %>% select(OTU, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
ASV_QM2List <- Taxon_QM2Data_Filtered %>% select(OTU)
# OTU Data for Mothur
OTU_List <- split(Tax_MDF, seq(nrow(xy.df)))
View(Sam_DF)
# Set-up
library(tidyverse)
source("https://bioconductor.org/biocLite.R")
biocLite("phyloseq")
library(phyloseq)
library(data.table)
# Load phyloseq data
load("mothur_phyloseq.RData")
load("qiime2_phyloseq.RData")
# Retrieve tables
Tax_MTable = mothur@tax_table
OTU_MTable = mothur@otu_table
Sam_MData = mothur@sam_data
Tax_QM2Table = qiime2@tax_table
OTU_QM2Table = qiime2@otu_table
Sam_QM2Data = qiime2@sam_data
# Legend:
# M = Mothur
# QM2 = QIIME2
# DF = Data Frame
# Tax/OTU/Sam = Taxon, OTU, Sample Data
# Transforming Mothur into data frames --------------------------------------------------MOTHUR CODE BELOW--------------------------------------
OTU_MDF <- data.frame(OTU_MTable)
Tax_MDF <- data.frame(Tax_MTable)
setDT(Tax_MDF, keep.rownames=TRUE)
colnames(Tax_MDF)[1] <- "OTU"
# Fitering out uncultured/unclassified Genus in Mothur
Genus_MTax <- Tax_MDF %>% select(OTU, Genus) %>% filter(!str_detect(Genus, 'uncultured'), !str_detect(Genus, 'unclassified'))
# Filtered Results (Less filtered --> More filtered down the list) = Less Filtered (Genus_MCount) and More Filtered (GM_Grp_Fitered)
Genus_MCount <- data.frame(table(Genus_MTax_Filtered)) %>% filter(Freq >= 5, Freq < 50)
# Genus Names of Filtered
Genus_MCount$Genus_MTax_Filtered
GM_Grp_Filtered <- Genus_MCount %>% filter(!str_detect(Genus_MTax_Filtered, 'group'), !str_detect(Genus_MTax_Filtered, '_ge'), !str_detect(Genus_MTax_Filtered, 'clade'))
# Transforming Qiime2 into data frames --------------------------------------------------QIIME2 CODE BELOW--------------------------------------
OTU_QM2DF <- data.frame(OTU_QM2Table)
Tax_QM2DF <- data.frame(Tax_QM2Table)
setDT(Tax_QM2DF, keep.rownames=TRUE)
colnames(Tax_QM2DF)[1] <- "OTU"
# Fitering out uncultured/unclassified Genus in Mothur
Genus_QM2Tax <- Tax_QM2DF %>% select(OTU, Genus) %>% filter(!str_detect(Genus, 'uncultured'), !str_detect(Genus, 'unclassified'))
# Filtered Results (Less filtered --> More filtered down the list) = Less Filtered (Genus_QM2Count) and More Filtered (GQM2_Grp_Fitered)
Genus_QM2Count <- data.frame(table(Genus_QM2Tax_Filtered)) %>% filter(Freq >= 5, Freq < 50)
# Genus Names of Filtered
Genus_QM2Count$Genus_QM2Tax_Filtered
GQM2_Grp_Filtered <- Genus_QM2Count %>% filter(!str_detect(Genus_QM2Tax_Filtered, 'group'), !str_detect(Genus_QM2Tax_Filtered, '_ge'), !str_detect(Genus_QM2Tax_Filtered, 'clade'))
# WORK . . .
# Data shared by both (Depth/O2 Extracted)
Sam_DF <- data.frame(Sam_MData)
setDT(Sam_DF, keep.rownames=FALSE)
Sam_Data_Filtered <- Sam_DF %>% select(Depth_m, O2_uM)
# Data for Mothur (List of OTU for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_MData_Filtered <- Tax_MDF %>% select(OTU, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
OTU_MList <- Taxon_MData_Filtered %>% select(OTU)
# Data for QIIME2 (List of ASV for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_QM2Data_Filtered <- Tax_QM2DF %>% select(OTU, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
ASV_QM2List <- Taxon_QM2Data_Filtered %>% select(OTU)
# OTU Data for Mothur
OTU_List <- split(Tax_MDF, seq(nrow(xy.df)))
# Set-up
library(tidyverse)
source("https://bioconductor.org/biocLite.R")
biocLite("phyloseq")
library(phyloseq)
library(data.table)
# Load phyloseq data
load("mothur_phyloseq.RData")
load("qiime2_phyloseq.RData")
# Retrieve tables
Tax_MTable = mothur@tax_table
OTU_MTable = mothur@otu_table
Sam_MData = mothur@sam_data
Tax_QM2Table = qiime2@tax_table
OTU_QM2Table = qiime2@otu_table
Sam_QM2Data = qiime2@sam_data
# Legend:
# M = Mothur
# QM2 = QIIME2
# DF = Data Frame
# Tax/OTU/Sam = Taxon, OTU, Sample Data
# Transforming Mothur into data frames --------------------------------------------------MOTHUR CODE BELOW--------------------------------------
OTU_MDF <- data.frame(OTU_MTable)
Tax_MDF <- data.frame(Tax_MTable)
setDT(Tax_MDF, keep.rownames=TRUE)
colnames(Tax_MDF)[1] <- "OTU"
# Fitering out uncultured/unclassified Genus in Mothur
Genus_MTax <- Tax_MDF %>% select(OTU, Genus) %>% filter(!str_detect(Genus, 'uncultured'), !str_detect(Genus, 'unclassified'))
# Filtered Results (Less filtered --> More filtered down the list) = Less Filtered (Genus_MCount) and More Filtered (GM_Grp_Fitered)
Genus_MCount <- data.frame(table(Genus_MTax_Filtered)) %>% filter(Freq >= 5, Freq < 50)
# Genus Names of Filtered
Genus_MCount$Genus_MTax_Filtered
GM_Grp_Filtered <- Genus_MCount %>% filter(!str_detect(Genus_MTax_Filtered, 'group'), !str_detect(Genus_MTax_Filtered, '_ge'), !str_detect(Genus_MTax_Filtered, 'clade'))
# Transforming Qiime2 into data frames --------------------------------------------------QIIME2 CODE BELOW--------------------------------------
OTU_QM2DF <- data.frame(OTU_QM2Table)
Tax_QM2DF <- data.frame(Tax_QM2Table)
setDT(Tax_QM2DF, keep.rownames=TRUE)
colnames(Tax_QM2DF)[1] <- "OTU"
# Fitering out uncultured/unclassified Genus in Mothur
Genus_QM2Tax <- Tax_QM2DF %>% select(OTU, Genus) %>% filter(!str_detect(Genus, 'uncultured'), !str_detect(Genus, 'unclassified'))
# Filtered Results (Less filtered --> More filtered down the list) = Less Filtered (Genus_QM2Count) and More Filtered (GQM2_Grp_Fitered)
Genus_QM2Count <- data.frame(table(Genus_QM2Tax_Filtered)) %>% filter(Freq >= 5, Freq < 50)
# Genus Names of Filtered
Genus_QM2Count$Genus_QM2Tax_Filtered
GQM2_Grp_Filtered <- Genus_QM2Count %>% filter(!str_detect(Genus_QM2Tax_Filtered, 'group'), !str_detect(Genus_QM2Tax_Filtered, '_ge'), !str_detect(Genus_QM2Tax_Filtered, 'clade'))
# WORK . . .
# Data shared by both (Depth/O2 Extracted)
Sam_DF <- data.frame(Sam_MData)
setDT(Sam_DF, keep.rownames=FALSE)
Sam_Data_Filtered <- Sam_DF %>% select(Depth_m, O2_uM)
# Data for Mothur (List of OTU for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_MData_Filtered <- Tax_MDF %>% select(OTU, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
OTU_MList <- Taxon_MData_Filtered %>% select(OTU)
# Data for QIIME2 (List of ASV for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_QM2Data_Filtered <- Tax_QM2DF %>% select(OTU, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
ASV_QM2List <- Taxon_QM2Data_Filtered %>% select(OTU)
# OTU Data for Mothur
OTU_List <- split(Tax_MDF, seq(nrow(xy.df)))
# Set-up
library(tidyverse)
source("https://bioconductor.org/biocLite.R")
biocLite("phyloseq")
library(phyloseq)
library(data.table)
# Load phyloseq data
load("mothur_phyloseq.RData")
load("qiime2_phyloseq.RData")
# Retrieve tables
Tax_MTable = mothur@tax_table
OTU_Table = mothur@otu_table
Sam_MData = mothur@sam_data
Tax_QM2Table = qiime2@tax_table
ASV_Table = qiime2@otu_table
Sam_QM2Data = qiime2@sam_data
# Legend:
# M = Mothur
# QM2 = QIIME2
# DF = Data Frame
# Tax/OTU/Sam = Taxon, OTU, Sample Data
# Transforming Mothur into data frames --------------------------------------------------MOTHUR CODE BELOW--------------------------------------
OTU_DF <- data.frame(OTU_Table)
setDT(OTU_DF)
Tax_MDF <- data.frame(Tax_MTable)
setDT(Tax_MDF, keep.rownames=TRUE)
colnames(Tax_MDF)[1] <- "OTU"
# Fitering out uncultured/unclassified Genus in Mothur
Genus_MTax <- Tax_MDF %>% select(OTU, Genus) %>% filter(!str_detect(Genus, 'uncultured'), !str_detect(Genus, 'unclassified'))
# Filtered Results (Less filtered --> More filtered down the list) = Less Filtered (Genus_MCount) and More Filtered (GM_Grp_Fitered)
Genus_MCount <- data.frame(table(Genus_MTax)) %>% filter(Freq >= 5, Freq < 50)
GM_Grp_Filtered <- Genus_MCount %>% filter(!str_detect(Genus_MTax_Filtered, 'group'), !str_detect(Genus_MTax_Filtered, '_ge'), !str_detect(Genus_MTax_Filtered, 'clade'))
# Transforming Qiime2 into data frames --------------------------------------------------QIIME2 CODE BELOW--------------------------------------
ASV_DF <- data.frame(ASV_Table)
setDT(ASV_DF, keep.rownames = TRUE)
colnames(ASV_DF)[1] <- "ASV"
Tax_QM2DF <- data.frame(Tax_QM2Table)
setDT(Tax_QM2DF, keep.rownames=TRUE)
colnames(Tax_QM2DF)[1] <- "ASV"
# Fitering out uncultured/unclassified Genus in QIIME2
Genus_QM2Tax <- Tax_QM2DF %>% select(ASV, Genus) %>% filter(!str_detect(Genus, 'uncultured'), !str_detect(Genus, 'unclassified'))
# Filtered Results (Less filtered --> More filtered down the list) = Less Filtered (Genus_QM2Count) and More Filtered (GQM2_Grp_Fitered)
Genus_QM2Count <- data.frame(table(Genus_QM2Tax)) %>% filter(Freq >= 5, Freq < 50)
GQM2_Grp_Filtered <- Genus_QM2Count %>% filter(!str_detect(Genus_QM2Tax_Filtered, 'group'), !str_detect(Genus_QM2Tax_Filtered, '_ge'), !str_detect(Genus_QM2Tax_Filtered, 'clade'))
# WORK . . .
# Data shared by both (Depth/O2 Extracted)
Sam_DF <- data.frame(Sam_MData)
setDT(Sam_DF, keep.rownames=FALSE)
Sam_Data_Filtered <- Sam_DF %>% select(Depth_m, O2_uM)
# Data for Mothur (List of OTU for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_MData_Filtered <- Tax_MDF %>% select(OTU, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
OTU_List <- Taxon_MData_Filtered %>% select(OTU)
# Data for QIIME2 (List of ASV for Planctomyces). Second line is for when you don't trust the first line (LUL)
Taxon_QM2Data_Filtered <- Tax_QM2DF %>% select(ASV, Genus) %>% filter(str_detect(Genus, 'Planctomyces'))
ASV_List <- Taxon_QM2Data_Filtered %>% select(ASV)
# OTU Data for Mothur
OTU_Vectors <- unlist(OTU_List, use.names=FALSE)
OTU_Subsets <- subset(OTU_DF, select=OTU_Vectors)
# OTU Data for QIIME2
ASV_Vectors <- unlist(ASV_List, use.names=FALSE)
ASV_Subsets <- ASV_DF %>% filter(ASV %in% ASV_Vectors)
mothur %>%
subset_taxa(Genus==“Planctomyces”) %>%
View(Taxon_MData_Filtered)
mothur %>%
Sam_MData(Genus== “Planctomyces”) %>%
library(magrittr)
mothur %>%
Sam_MData(Genus== “Planctomyces”) %>%
```{r}
mothur %>%
subset_taxa(Genus == “Planctomyces”) %>%
setwd("/Users/Leilynaz/Documents/MICB425_portfolio/")
load("/Users/Leilynaz/Desktop/MICB425_Project1/data/mothur_phyloseq.RData")
setwd("/Users/Leilynaz/Documents/MICB425_portfolio/")
load("/Users/Leilynaz/Desktop/MICB425_Project1/data/mothur_phyloseq.RData")
